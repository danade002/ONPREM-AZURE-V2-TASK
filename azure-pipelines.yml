trigger:
- main
- develop

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
  AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
  AZURE_TENANT_ID: $(AZURE_TENANT_ID)
  AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
  ADMIN_SSH_KEY: $(ADMIN_SSH_KEY)

steps:
- checkout: self

- task: AzureCLI@2
  inputs:
    azureSubscription: 'AzureDevOpsConnection'  # Replace with your Azure service connection name
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      export ARM_CLIENT_ID=$(AZURE_CLIENT_ID)
      export ARM_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)
      export ARM_TENANT_ID=$(AZURE_TENANT_ID)
      export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
      terraform init
      terraform fmt -recursive
      terraform validate

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-var-file=dev.tfvars'
    environmentServiceNameAzureRM: 'AzureDevOpsConnection'  # Replace with your Azure service connection name
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-var-file=dev.tfvars -auto-approve'
    environmentServiceNameAzureRM: 'AzureDevOpsConnection'  # Replace with your Azure service connection name
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
